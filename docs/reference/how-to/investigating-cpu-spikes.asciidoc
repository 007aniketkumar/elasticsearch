[[investigating-cpu-spikes]]
== Investigating CPU spikes

[discrete]
=== Monitoring

Elastic stack monitoring collects metrics from the Elasticsearch nodes, Logstash, Kibana instances, and Beats in your deployment.  You can also configure Filebeat to collect the logs from the same components of your deployment.  See the monitoring overview and configure monitoring.
https://www.elastic.co/guide/en/elasticsearch/reference/7.11/monitoring-production.html

[discrete]
=== Alerting
When you set up monitoring several stack monitoring alerts were added to Stack Management > Alerts and actions.  You should consider adding connectors to send the alerts to you, the default is to write the alerts to the Kibana log file.
https://www.elastic.co/guide/en/kibana/current/alerting-getting-started.html

[discrete]
=== High CPU utilization
These are things to look for to 
Percent (100% per core)
Normalized percent (total % of multicore)
CPU time (milliseconds, millicores)
High load averages
Decimal number starting at 0.00 (wikipedia)
Exceeding # of CPU cores indicates an overloaded system
Frequent or long GC cycles
Every GC run takes CPU time
Heap exhaustion can look like a CPU issue

%iowait - How long the CPU is waiting on storage
Device utilization %
Throughput (MB/s, GB/s)
I/O operations per second (IOPS)
Operation service time (ms)


[discrete]
=== Look for high CPU consuming threads

Occasional high CPU jobs are expected, but constant high CPU usage on 
long running jobs should be investigated.  If CPU utilization on a system
with an Elasticsearch node is high then find out which Elasticsearch
threads are contributing to this by running this command:

[source,console]
--------------------------------------------------
GET _nodes/hot_threads
--------------------------------------------------

[discrete]
=== Look for long running tasks

Common high CPU causes are heavy read/write. Certain elasticsearch operations
can also be CPU intensive, like lookup, analyzer, nested aggregation, force
merge, percolate query, machine learning jobs. Some watcher jobs can also be
expansive (depends on the script)

[source,console]
--------------------------------------------------
GET _tasks?detailed
--------------------------------------------------

